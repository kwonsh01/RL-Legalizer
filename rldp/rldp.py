# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RL_Legalizer
else:
    import _RL_Legalizer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RL_Legalizer.delete_SwigPyIterator

    def value(self):
        return _RL_Legalizer.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RL_Legalizer.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RL_Legalizer.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RL_Legalizer.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RL_Legalizer.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RL_Legalizer.SwigPyIterator_copy(self)

    def next(self):
        return _RL_Legalizer.SwigPyIterator_next(self)

    def __next__(self):
        return _RL_Legalizer.SwigPyIterator___next__(self)

    def previous(self):
        return _RL_Legalizer.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RL_Legalizer.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RL_Legalizer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RL_Legalizer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RL_Legalizer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RL_Legalizer.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RL_Legalizer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RL_Legalizer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RL_Legalizer:
_RL_Legalizer.SwigPyIterator_swigregister(SwigPyIterator)
INIT = _RL_Legalizer.INIT
FINAL = _RL_Legalizer.FINAL
PI_PIN = _RL_Legalizer.PI_PIN
PO_PIN = _RL_Legalizer.PO_PIN
NONPIO_PIN = _RL_Legalizer.NONPIO_PIN
VDD = _RL_Legalizer.VDD
VSS = _RL_Legalizer.VSS
class rect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    xLL = property(_RL_Legalizer.rect_xLL_get, _RL_Legalizer.rect_xLL_set)
    yLL = property(_RL_Legalizer.rect_yLL_get, _RL_Legalizer.rect_yLL_set)
    xUR = property(_RL_Legalizer.rect_xUR_get, _RL_Legalizer.rect_xUR_set)
    yUR = property(_RL_Legalizer.rect_yUR_get, _RL_Legalizer.rect_yUR_set)

    def __init__(self):
        _RL_Legalizer.rect_swiginit(self, _RL_Legalizer.new_rect())

    def dump(self):
        return _RL_Legalizer.rect_dump(self)
    __swig_destroy__ = _RL_Legalizer.delete_rect

# Register rect in _RL_Legalizer:
_RL_Legalizer.rect_swigregister(rect)
class site(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.site_name_get, _RL_Legalizer.site_name_set)
    width = property(_RL_Legalizer.site_width_get, _RL_Legalizer.site_width_set)
    height = property(_RL_Legalizer.site_height_get, _RL_Legalizer.site_height_set)
    type = property(_RL_Legalizer.site_type_get, _RL_Legalizer.site_type_set)
    symmetries = property(_RL_Legalizer.site_symmetries_get, _RL_Legalizer.site_symmetries_set)

    def __init__(self, *args):
        _RL_Legalizer.site_swiginit(self, _RL_Legalizer.new_site(*args))

    def _print(self):
        return _RL_Legalizer.site__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_site

# Register site in _RL_Legalizer:
_RL_Legalizer.site_swigregister(site)
class mincut(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    via_num = property(_RL_Legalizer.mincut_via_num_get, _RL_Legalizer.mincut_via_num_set)
    width = property(_RL_Legalizer.mincut_width_get, _RL_Legalizer.mincut_width_set)
    length = property(_RL_Legalizer.mincut_length_get, _RL_Legalizer.mincut_length_set)
    within = property(_RL_Legalizer.mincut_within_get, _RL_Legalizer.mincut_within_set)
    direction = property(_RL_Legalizer.mincut_direction_get, _RL_Legalizer.mincut_direction_set)

    def __init__(self):
        _RL_Legalizer.mincut_swiginit(self, _RL_Legalizer.new_mincut())
    __swig_destroy__ = _RL_Legalizer.delete_mincut

# Register mincut in _RL_Legalizer:
_RL_Legalizer.mincut_swigregister(mincut)
class space(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    adj = property(_RL_Legalizer.space_adj_get, _RL_Legalizer.space_adj_set)
    type = property(_RL_Legalizer.space_type_get, _RL_Legalizer.space_type_set)
    min = property(_RL_Legalizer.space_min_get, _RL_Legalizer.space_min_set)
    max = property(_RL_Legalizer.space_max_get, _RL_Legalizer.space_max_set)

    def __init__(self):
        _RL_Legalizer.space_swiginit(self, _RL_Legalizer.new_space())
    __swig_destroy__ = _RL_Legalizer.delete_space

# Register space in _RL_Legalizer:
_RL_Legalizer.space_swigregister(space)
class layer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.layer_name_get, _RL_Legalizer.layer_name_set)
    type = property(_RL_Legalizer.layer_type_get, _RL_Legalizer.layer_type_set)
    direction = property(_RL_Legalizer.layer_direction_get, _RL_Legalizer.layer_direction_set)
    xPitch = property(_RL_Legalizer.layer_xPitch_get, _RL_Legalizer.layer_xPitch_set)
    yPitch = property(_RL_Legalizer.layer_yPitch_get, _RL_Legalizer.layer_yPitch_set)
    xOffset = property(_RL_Legalizer.layer_xOffset_get, _RL_Legalizer.layer_xOffset_set)
    yOffset = property(_RL_Legalizer.layer_yOffset_get, _RL_Legalizer.layer_yOffset_set)
    width = property(_RL_Legalizer.layer_width_get, _RL_Legalizer.layer_width_set)
    maxWidth = property(_RL_Legalizer.layer_maxWidth_get, _RL_Legalizer.layer_maxWidth_set)
    spacing = property(_RL_Legalizer.layer_spacing_get, _RL_Legalizer.layer_spacing_set)
    minStep = property(_RL_Legalizer.layer_minStep_get, _RL_Legalizer.layer_minStep_set)
    area = property(_RL_Legalizer.layer_area_get, _RL_Legalizer.layer_area_set)
    minEnclosedArea = property(_RL_Legalizer.layer_minEnclosedArea_get, _RL_Legalizer.layer_minEnclosedArea_set)
    mincut_rule = property(_RL_Legalizer.layer_mincut_rule_get, _RL_Legalizer.layer_mincut_rule_set)
    spacing_rule = property(_RL_Legalizer.layer_spacing_rule_get, _RL_Legalizer.layer_spacing_rule_set)

    def __init__(self):
        _RL_Legalizer.layer_swiginit(self, _RL_Legalizer.new_layer())

    def _print(self):
        return _RL_Legalizer.layer__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_layer

# Register layer in _RL_Legalizer:
_RL_Legalizer.layer_swigregister(layer)
class viaRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.viaRule_name_get, _RL_Legalizer.viaRule_name_set)
    layers = property(_RL_Legalizer.viaRule_layers_get, _RL_Legalizer.viaRule_layers_set)
    enclosure = property(_RL_Legalizer.viaRule_enclosure_get, _RL_Legalizer.viaRule_enclosure_set)
    width = property(_RL_Legalizer.viaRule_width_get, _RL_Legalizer.viaRule_width_set)
    spacing = property(_RL_Legalizer.viaRule_spacing_get, _RL_Legalizer.viaRule_spacing_set)
    viaRect = property(_RL_Legalizer.viaRule_viaRect_get, _RL_Legalizer.viaRule_viaRect_set)

    def __init__(self):
        _RL_Legalizer.viaRule_swiginit(self, _RL_Legalizer.new_viaRule())
    __swig_destroy__ = _RL_Legalizer.delete_viaRule

# Register viaRule in _RL_Legalizer:
_RL_Legalizer.viaRule_swigregister(viaRule)
class via(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.via_name_get, _RL_Legalizer.via_name_set)
    viaRule = property(_RL_Legalizer.via_viaRule_get, _RL_Legalizer.via_viaRule_set)
    obses = property(_RL_Legalizer.via_obses_get, _RL_Legalizer.via_obses_set)
    property = property(_RL_Legalizer.via_property_get, _RL_Legalizer.via_property_set)

    def __init__(self):
        _RL_Legalizer.via_swiginit(self, _RL_Legalizer.new_via())
    __swig_destroy__ = _RL_Legalizer.delete_via

# Register via in _RL_Legalizer:
_RL_Legalizer.via_swigregister(via)
class macro_pin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    direction = property(_RL_Legalizer.macro_pin_direction_get, _RL_Legalizer.macro_pin_direction_set)
    port = property(_RL_Legalizer.macro_pin_port_get, _RL_Legalizer.macro_pin_port_set)
    layer = property(_RL_Legalizer.macro_pin_layer_get, _RL_Legalizer.macro_pin_layer_set)
    shape = property(_RL_Legalizer.macro_pin_shape_get, _RL_Legalizer.macro_pin_shape_set)

    def __init__(self):
        _RL_Legalizer.macro_pin_swiginit(self, _RL_Legalizer.new_macro_pin())
    __swig_destroy__ = _RL_Legalizer.delete_macro_pin

# Register macro_pin in _RL_Legalizer:
_RL_Legalizer.macro_pin_swigregister(macro_pin)
class macro(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.macro_name_get, _RL_Legalizer.macro_name_set)
    type = property(_RL_Legalizer.macro_type_get, _RL_Legalizer.macro_type_set)
    isFlop = property(_RL_Legalizer.macro_isFlop_get, _RL_Legalizer.macro_isFlop_set)
    isMulti = property(_RL_Legalizer.macro_isMulti_get, _RL_Legalizer.macro_isMulti_set)
    xOrig = property(_RL_Legalizer.macro_xOrig_get, _RL_Legalizer.macro_xOrig_set)
    yOrig = property(_RL_Legalizer.macro_yOrig_get, _RL_Legalizer.macro_yOrig_set)
    width = property(_RL_Legalizer.macro_width_get, _RL_Legalizer.macro_width_set)
    height = property(_RL_Legalizer.macro_height_get, _RL_Legalizer.macro_height_set)
    edgetypeLeft = property(_RL_Legalizer.macro_edgetypeLeft_get, _RL_Legalizer.macro_edgetypeLeft_set)
    edgetypeRight = property(_RL_Legalizer.macro_edgetypeRight_get, _RL_Legalizer.macro_edgetypeRight_set)
    sites = property(_RL_Legalizer.macro_sites_get, _RL_Legalizer.macro_sites_set)
    pins = property(_RL_Legalizer.macro_pins_get, _RL_Legalizer.macro_pins_set)
    obses = property(_RL_Legalizer.macro_obses_get, _RL_Legalizer.macro_obses_set)
    top_power = property(_RL_Legalizer.macro_top_power_get, _RL_Legalizer.macro_top_power_set)

    def __init__(self):
        _RL_Legalizer.macro_swiginit(self, _RL_Legalizer.new_macro())

    def _print(self):
        return _RL_Legalizer.macro__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_macro

# Register macro in _RL_Legalizer:
_RL_Legalizer.macro_swigregister(macro)
class pin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.pin_name_get, _RL_Legalizer.pin_name_set)
    id = property(_RL_Legalizer.pin_id_get, _RL_Legalizer.pin_id_set)
    owner = property(_RL_Legalizer.pin_owner_get, _RL_Legalizer.pin_owner_set)
    net = property(_RL_Legalizer.pin_net_get, _RL_Legalizer.pin_net_set)
    type = property(_RL_Legalizer.pin_type_get, _RL_Legalizer.pin_type_set)
    isFlopInput = property(_RL_Legalizer.pin_isFlopInput_get, _RL_Legalizer.pin_isFlopInput_set)
    isFlopCkPort = property(_RL_Legalizer.pin_isFlopCkPort_get, _RL_Legalizer.pin_isFlopCkPort_set)
    x_coord = property(_RL_Legalizer.pin_x_coord_get, _RL_Legalizer.pin_x_coord_set)
    y_coord = property(_RL_Legalizer.pin_y_coord_get, _RL_Legalizer.pin_y_coord_set)
    x_offset = property(_RL_Legalizer.pin_x_offset_get, _RL_Legalizer.pin_x_offset_set)
    y_offset = property(_RL_Legalizer.pin_y_offset_get, _RL_Legalizer.pin_y_offset_set)
    isFixed = property(_RL_Legalizer.pin_isFixed_get, _RL_Legalizer.pin_isFixed_set)

    def __init__(self):
        _RL_Legalizer.pin_swiginit(self, _RL_Legalizer.new_pin())

    def _print(self):
        return _RL_Legalizer.pin__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_pin

# Register pin in _RL_Legalizer:
_RL_Legalizer.pin_swigregister(pin)
class cell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.cell_name_get, _RL_Legalizer.cell_name_set)
    id = property(_RL_Legalizer.cell_id_get, _RL_Legalizer.cell_id_set)
    type = property(_RL_Legalizer.cell_type_get, _RL_Legalizer.cell_type_set)
    x_coord = property(_RL_Legalizer.cell_x_coord_get, _RL_Legalizer.cell_x_coord_set)
    y_coord = property(_RL_Legalizer.cell_y_coord_get, _RL_Legalizer.cell_y_coord_set)
    init_x_coord = property(_RL_Legalizer.cell_init_x_coord_get, _RL_Legalizer.cell_init_x_coord_set)
    init_y_coord = property(_RL_Legalizer.cell_init_y_coord_get, _RL_Legalizer.cell_init_y_coord_set)
    x_pos = property(_RL_Legalizer.cell_x_pos_get, _RL_Legalizer.cell_x_pos_set)
    y_pos = property(_RL_Legalizer.cell_y_pos_get, _RL_Legalizer.cell_y_pos_set)
    width = property(_RL_Legalizer.cell_width_get, _RL_Legalizer.cell_width_set)
    height = property(_RL_Legalizer.cell_height_get, _RL_Legalizer.cell_height_set)
    isFixed = property(_RL_Legalizer.cell_isFixed_get, _RL_Legalizer.cell_isFixed_set)
    isPlaced = property(_RL_Legalizer.cell_isPlaced_get, _RL_Legalizer.cell_isPlaced_set)
    inGroup = property(_RL_Legalizer.cell_inGroup_get, _RL_Legalizer.cell_inGroup_set)
    hold = property(_RL_Legalizer.cell_hold_get, _RL_Legalizer.cell_hold_set)
    region = property(_RL_Legalizer.cell_region_get, _RL_Legalizer.cell_region_set)
    ports = property(_RL_Legalizer.cell_ports_get, _RL_Legalizer.cell_ports_set)
    cellorient = property(_RL_Legalizer.cell_cellorient_get, _RL_Legalizer.cell_cellorient_set)
    group = property(_RL_Legalizer.cell_group_get, _RL_Legalizer.cell_group_set)
    dense_factor = property(_RL_Legalizer.cell_dense_factor_get, _RL_Legalizer.cell_dense_factor_set)
    dense_factor_count = property(_RL_Legalizer.cell_dense_factor_count_get, _RL_Legalizer.cell_dense_factor_count_set)
    binId = property(_RL_Legalizer.cell_binId_get, _RL_Legalizer.cell_binId_set)
    disp = property(_RL_Legalizer.cell_disp_get, _RL_Legalizer.cell_disp_set)

    def __init__(self):
        _RL_Legalizer.cell_swiginit(self, _RL_Legalizer.new_cell())

    def _print(self):
        return _RL_Legalizer.cell__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_cell

# Register cell in _RL_Legalizer:
_RL_Legalizer.cell_swigregister(cell)
class pixel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.pixel_name_get, _RL_Legalizer.pixel_name_set)
    util = property(_RL_Legalizer.pixel_util_get, _RL_Legalizer.pixel_util_set)
    x_pos = property(_RL_Legalizer.pixel_x_pos_get, _RL_Legalizer.pixel_x_pos_set)
    y_pos = property(_RL_Legalizer.pixel_y_pos_get, _RL_Legalizer.pixel_y_pos_set)
    group = property(_RL_Legalizer.pixel_group_get, _RL_Legalizer.pixel_group_set)
    linked_cell = property(_RL_Legalizer.pixel_linked_cell_get, _RL_Legalizer.pixel_linked_cell_set)
    isValid = property(_RL_Legalizer.pixel_isValid_get, _RL_Legalizer.pixel_isValid_set)

    def __init__(self):
        _RL_Legalizer.pixel_swiginit(self, _RL_Legalizer.new_pixel())
    __swig_destroy__ = _RL_Legalizer.delete_pixel

# Register pixel in _RL_Legalizer:
_RL_Legalizer.pixel_swigregister(pixel)
class net(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.net_name_get, _RL_Legalizer.net_name_set)
    source = property(_RL_Legalizer.net_source_get, _RL_Legalizer.net_source_set)
    sinks = property(_RL_Legalizer.net_sinks_get, _RL_Legalizer.net_sinks_set)

    def __init__(self):
        _RL_Legalizer.net_swiginit(self, _RL_Legalizer.new_net())

    def _print(self):
        return _RL_Legalizer.net__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_net

# Register net in _RL_Legalizer:
_RL_Legalizer.net_swigregister(net)
class row(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.row_name_get, _RL_Legalizer.row_name_set)
    site = property(_RL_Legalizer.row_site_get, _RL_Legalizer.row_site_set)
    origX = property(_RL_Legalizer.row_origX_get, _RL_Legalizer.row_origX_set)
    origY = property(_RL_Legalizer.row_origY_get, _RL_Legalizer.row_origY_set)
    stepX = property(_RL_Legalizer.row_stepX_get, _RL_Legalizer.row_stepX_set)
    stepY = property(_RL_Legalizer.row_stepY_get, _RL_Legalizer.row_stepY_set)
    numSites = property(_RL_Legalizer.row_numSites_get, _RL_Legalizer.row_numSites_set)
    siteorient = property(_RL_Legalizer.row_siteorient_get, _RL_Legalizer.row_siteorient_set)
    top_power = property(_RL_Legalizer.row_top_power_get, _RL_Legalizer.row_top_power_set)
    cell_list = property(_RL_Legalizer.row_cell_list_get, _RL_Legalizer.row_cell_list_set)

    def __init__(self):
        _RL_Legalizer.row_swiginit(self, _RL_Legalizer.new_row())

    def _print(self):
        return _RL_Legalizer.row__print(self)
    __swig_destroy__ = _RL_Legalizer.delete_row

# Register row in _RL_Legalizer:
_RL_Legalizer.row_swigregister(row)
class group(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_RL_Legalizer.group_name_get, _RL_Legalizer.group_name_set)
    type = property(_RL_Legalizer.group_type_get, _RL_Legalizer.group_type_set)
    tag = property(_RL_Legalizer.group_tag_get, _RL_Legalizer.group_tag_set)
    regions = property(_RL_Legalizer.group_regions_get, _RL_Legalizer.group_regions_set)
    siblings = property(_RL_Legalizer.group_siblings_get, _RL_Legalizer.group_siblings_set)
    pixels = property(_RL_Legalizer.group_pixels_get, _RL_Legalizer.group_pixels_set)
    boundary = property(_RL_Legalizer.group_boundary_get, _RL_Legalizer.group_boundary_set)
    util = property(_RL_Legalizer.group_util_get, _RL_Legalizer.group_util_set)

    def __init__(self):
        _RL_Legalizer.group_swiginit(self, _RL_Legalizer.new_group())

    def dump(self, temp_):
        return _RL_Legalizer.group_dump(self, temp_)
    __swig_destroy__ = _RL_Legalizer.delete_group

# Register group in _RL_Legalizer:
_RL_Legalizer.group_swigregister(group)
class sub_region(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    boundary = property(_RL_Legalizer.sub_region_boundary_get, _RL_Legalizer.sub_region_boundary_set)
    x_pos = property(_RL_Legalizer.sub_region_x_pos_get, _RL_Legalizer.sub_region_x_pos_set)
    y_pos = property(_RL_Legalizer.sub_region_y_pos_get, _RL_Legalizer.sub_region_y_pos_set)
    width = property(_RL_Legalizer.sub_region_width_get, _RL_Legalizer.sub_region_width_set)
    height = property(_RL_Legalizer.sub_region_height_get, _RL_Legalizer.sub_region_height_set)
    siblings = property(_RL_Legalizer.sub_region_siblings_get, _RL_Legalizer.sub_region_siblings_set)

    def __init__(self):
        _RL_Legalizer.sub_region_swiginit(self, _RL_Legalizer.new_sub_region())
    __swig_destroy__ = _RL_Legalizer.delete_sub_region

# Register sub_region in _RL_Legalizer:
_RL_Legalizer.sub_region_swigregister(sub_region)
class density_bin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lx = property(_RL_Legalizer.density_bin_lx_get, _RL_Legalizer.density_bin_lx_set)
    hx = property(_RL_Legalizer.density_bin_hx_get, _RL_Legalizer.density_bin_hx_set)
    ly = property(_RL_Legalizer.density_bin_ly_get, _RL_Legalizer.density_bin_ly_set)
    hy = property(_RL_Legalizer.density_bin_hy_get, _RL_Legalizer.density_bin_hy_set)
    area = property(_RL_Legalizer.density_bin_area_get, _RL_Legalizer.density_bin_area_set)
    m_util = property(_RL_Legalizer.density_bin_m_util_get, _RL_Legalizer.density_bin_m_util_set)
    f_util = property(_RL_Legalizer.density_bin_f_util_get, _RL_Legalizer.density_bin_f_util_set)
    free_space = property(_RL_Legalizer.density_bin_free_space_get, _RL_Legalizer.density_bin_free_space_set)
    overflow = property(_RL_Legalizer.density_bin_overflow_get, _RL_Legalizer.density_bin_overflow_set)
    density_limit = property(_RL_Legalizer.density_bin_density_limit_get, _RL_Legalizer.density_bin_density_limit_set)

    def _print(self):
        return _RL_Legalizer.density_bin__print(self)

    def __init__(self):
        _RL_Legalizer.density_bin_swiginit(self, _RL_Legalizer.new_density_bin())
    __swig_destroy__ = _RL_Legalizer.delete_density_bin

# Register density_bin in _RL_Legalizer:
_RL_Legalizer.density_bin_swigregister(density_bin)
class track(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    axis = property(_RL_Legalizer.track_axis_get, _RL_Legalizer.track_axis_set)
    start = property(_RL_Legalizer.track_start_get, _RL_Legalizer.track_start_set)
    num_track = property(_RL_Legalizer.track_num_track_get, _RL_Legalizer.track_num_track_set)
    step = property(_RL_Legalizer.track_step_get, _RL_Legalizer.track_step_set)
    layers = property(_RL_Legalizer.track_layers_get, _RL_Legalizer.track_layers_set)

    def __init__(self):
        _RL_Legalizer.track_swiginit(self, _RL_Legalizer.new_track())
    __swig_destroy__ = _RL_Legalizer.delete_track

# Register track in _RL_Legalizer:
_RL_Legalizer.track_swigregister(track)
class circuit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GROUP_IGNORE = property(_RL_Legalizer.circuit_GROUP_IGNORE_get, _RL_Legalizer.circuit_GROUP_IGNORE_set)

    def init_large_cell_stor(self):
        return _RL_Legalizer.circuit_init_large_cell_stor(self)
    macro2id = property(_RL_Legalizer.circuit_macro2id_get, _RL_Legalizer.circuit_macro2id_set)
    cell2id = property(_RL_Legalizer.circuit_cell2id_get, _RL_Legalizer.circuit_cell2id_set)
    pin2id = property(_RL_Legalizer.circuit_pin2id_get, _RL_Legalizer.circuit_pin2id_set)
    net2id = property(_RL_Legalizer.circuit_net2id_get, _RL_Legalizer.circuit_net2id_set)
    row2id = property(_RL_Legalizer.circuit_row2id_get, _RL_Legalizer.circuit_row2id_set)
    site2id = property(_RL_Legalizer.circuit_site2id_get, _RL_Legalizer.circuit_site2id_set)
    layer2id = property(_RL_Legalizer.circuit_layer2id_get, _RL_Legalizer.circuit_layer2id_set)
    via2id = property(_RL_Legalizer.circuit_via2id_get, _RL_Legalizer.circuit_via2id_set)
    edge_spacing = property(_RL_Legalizer.circuit_edge_spacing_get, _RL_Legalizer.circuit_edge_spacing_set)
    group2id = property(_RL_Legalizer.circuit_group2id_get, _RL_Legalizer.circuit_group2id_set)
    design_util = property(_RL_Legalizer.circuit_design_util_get, _RL_Legalizer.circuit_design_util_set)
    sum_displacement = property(_RL_Legalizer.circuit_sum_displacement_get, _RL_Legalizer.circuit_sum_displacement_set)
    num_fixed_nodes = property(_RL_Legalizer.circuit_num_fixed_nodes_get, _RL_Legalizer.circuit_num_fixed_nodes_set)
    total_mArea = property(_RL_Legalizer.circuit_total_mArea_get, _RL_Legalizer.circuit_total_mArea_set)
    total_fArea = property(_RL_Legalizer.circuit_total_fArea_get, _RL_Legalizer.circuit_total_fArea_set)
    designArea = property(_RL_Legalizer.circuit_designArea_get, _RL_Legalizer.circuit_designArea_set)
    rowHeight = property(_RL_Legalizer.circuit_rowHeight_get, _RL_Legalizer.circuit_rowHeight_set)
    lx = property(_RL_Legalizer.circuit_lx_get, _RL_Legalizer.circuit_lx_set)
    rx = property(_RL_Legalizer.circuit_rx_get, _RL_Legalizer.circuit_rx_set)
    by = property(_RL_Legalizer.circuit_by_get, _RL_Legalizer.circuit_by_set)
    ty = property(_RL_Legalizer.circuit_ty_get, _RL_Legalizer.circuit_ty_set)
    die = property(_RL_Legalizer.circuit_die_get, _RL_Legalizer.circuit_die_set)
    core = property(_RL_Legalizer.circuit_core_get, _RL_Legalizer.circuit_core_set)
    minVddCoordiY = property(_RL_Legalizer.circuit_minVddCoordiY_get, _RL_Legalizer.circuit_minVddCoordiY_set)
    initial_power = property(_RL_Legalizer.circuit_initial_power_get, _RL_Legalizer.circuit_initial_power_set)
    max_utilization = property(_RL_Legalizer.circuit_max_utilization_get, _RL_Legalizer.circuit_max_utilization_set)
    displacement = property(_RL_Legalizer.circuit_displacement_get, _RL_Legalizer.circuit_displacement_set)
    max_disp_const = property(_RL_Legalizer.circuit_max_disp_const_get, _RL_Legalizer.circuit_max_disp_const_set)
    wsite = property(_RL_Legalizer.circuit_wsite_get, _RL_Legalizer.circuit_wsite_set)
    max_cell_height = property(_RL_Legalizer.circuit_max_cell_height_get, _RL_Legalizer.circuit_max_cell_height_set)
    num_cpu = property(_RL_Legalizer.circuit_num_cpu_get, _RL_Legalizer.circuit_num_cpu_set)
    out_def_name = property(_RL_Legalizer.circuit_out_def_name_get, _RL_Legalizer.circuit_out_def_name_set)
    in_def_name = property(_RL_Legalizer.circuit_in_def_name_get, _RL_Legalizer.circuit_in_def_name_set)
    benchmark = property(_RL_Legalizer.circuit_benchmark_get, _RL_Legalizer.circuit_benchmark_set)
    grid = property(_RL_Legalizer.circuit_grid_get, _RL_Legalizer.circuit_grid_set)
    dummy_cell = property(_RL_Legalizer.circuit_dummy_cell_get, _RL_Legalizer.circuit_dummy_cell_set)
    sub_regions = property(_RL_Legalizer.circuit_sub_regions_get, _RL_Legalizer.circuit_sub_regions_set)
    tracks = property(_RL_Legalizer.circuit_tracks_get, _RL_Legalizer.circuit_tracks_set)
    LEFVersion = property(_RL_Legalizer.circuit_LEFVersion_get, _RL_Legalizer.circuit_LEFVersion_set)
    LEFNamesCaseSensitive = property(_RL_Legalizer.circuit_LEFNamesCaseSensitive_get, _RL_Legalizer.circuit_LEFNamesCaseSensitive_set)
    LEFDelimiter = property(_RL_Legalizer.circuit_LEFDelimiter_get, _RL_Legalizer.circuit_LEFDelimiter_set)
    LEFBusCharacters = property(_RL_Legalizer.circuit_LEFBusCharacters_get, _RL_Legalizer.circuit_LEFBusCharacters_set)
    LEFManufacturingGrid = property(_RL_Legalizer.circuit_LEFManufacturingGrid_get, _RL_Legalizer.circuit_LEFManufacturingGrid_set)
    MAXVIASTACK = property(_RL_Legalizer.circuit_MAXVIASTACK_get, _RL_Legalizer.circuit_MAXVIASTACK_set)
    minLayer = property(_RL_Legalizer.circuit_minLayer_get, _RL_Legalizer.circuit_minLayer_set)
    maxLayer = property(_RL_Legalizer.circuit_maxLayer_get, _RL_Legalizer.circuit_maxLayer_set)
    DEFVersion = property(_RL_Legalizer.circuit_DEFVersion_get, _RL_Legalizer.circuit_DEFVersion_set)
    DEFDelimiter = property(_RL_Legalizer.circuit_DEFDelimiter_get, _RL_Legalizer.circuit_DEFDelimiter_set)
    DEFBusCharacters = property(_RL_Legalizer.circuit_DEFBusCharacters_get, _RL_Legalizer.circuit_DEFBusCharacters_set)
    design_name = property(_RL_Legalizer.circuit_design_name_get, _RL_Legalizer.circuit_design_name_set)
    DEFdist2Microns = property(_RL_Legalizer.circuit_DEFdist2Microns_get, _RL_Legalizer.circuit_DEFdist2Microns_set)
    dieArea = property(_RL_Legalizer.circuit_dieArea_get, _RL_Legalizer.circuit_dieArea_set)
    sites = property(_RL_Legalizer.circuit_sites_get, _RL_Legalizer.circuit_sites_set)
    layers = property(_RL_Legalizer.circuit_layers_get, _RL_Legalizer.circuit_layers_set)
    macros = property(_RL_Legalizer.circuit_macros_get, _RL_Legalizer.circuit_macros_set)
    cells = property(_RL_Legalizer.circuit_cells_get, _RL_Legalizer.circuit_cells_set)
    nets = property(_RL_Legalizer.circuit_nets_get, _RL_Legalizer.circuit_nets_set)
    pins = property(_RL_Legalizer.circuit_pins_get, _RL_Legalizer.circuit_pins_set)
    prevrows = property(_RL_Legalizer.circuit_prevrows_get, _RL_Legalizer.circuit_prevrows_set)
    rows = property(_RL_Legalizer.circuit_rows_get, _RL_Legalizer.circuit_rows_set)
    vias = property(_RL_Legalizer.circuit_vias_get, _RL_Legalizer.circuit_vias_set)
    viaRules = property(_RL_Legalizer.circuit_viaRules_get, _RL_Legalizer.circuit_viaRules_set)
    groups = property(_RL_Legalizer.circuit_groups_get, _RL_Legalizer.circuit_groups_set)
    large_cell_stor = property(_RL_Legalizer.circuit_large_cell_stor_get, _RL_Legalizer.circuit_large_cell_stor_set)

    def locateOrCreateMacro(self, macroName):
        return _RL_Legalizer.circuit_locateOrCreateMacro(self, macroName)

    def locateOrCreateCell(self, cellName):
        return _RL_Legalizer.circuit_locateOrCreateCell(self, cellName)

    def locateOrCreateNet(self, netName):
        return _RL_Legalizer.circuit_locateOrCreateNet(self, netName)

    def locateOrCreatePin(self, pinName):
        return _RL_Legalizer.circuit_locateOrCreatePin(self, pinName)

    def locateOrCreateRow(self, rowName):
        return _RL_Legalizer.circuit_locateOrCreateRow(self, rowName)

    def locateOrCreateSite(self, siteName):
        return _RL_Legalizer.circuit_locateOrCreateSite(self, siteName)

    def locateOrCreateLayer(self, layerName):
        return _RL_Legalizer.circuit_locateOrCreateLayer(self, layerName)

    def locateOrCreateVia(self, viaName):
        return _RL_Legalizer.circuit_locateOrCreateVia(self, viaName)

    def locateOrCreateGroup(self, groupName):
        return _RL_Legalizer.circuit_locateOrCreateGroup(self, groupName)

    def _print(self):
        return _RL_Legalizer.circuit__print(self)

    def read_lef_site(self, _is):
        return _RL_Legalizer.circuit_read_lef_site(self, _is)

    def read_lef_property(self, _is):
        return _RL_Legalizer.circuit_read_lef_property(self, _is)

    def read_lef_layer(self, _is):
        return _RL_Legalizer.circuit_read_lef_layer(self, _is)

    def read_lef_via(self, _is):
        return _RL_Legalizer.circuit_read_lef_via(self, _is)

    def read_lef_viaRule(self, _is):
        return _RL_Legalizer.circuit_read_lef_viaRule(self, _is)

    def read_lef_macro(self, _is):
        return _RL_Legalizer.circuit_read_lef_macro(self, _is)

    def read_lef_macro_site(self, _is, myMacro):
        return _RL_Legalizer.circuit_read_lef_macro_site(self, _is, myMacro)

    def read_lef_macro_pin(self, _is, myMacro):
        return _RL_Legalizer.circuit_read_lef_macro_pin(self, _is, myMacro)

    def read_lef_macro_define_top_power(self, myMacro):
        return _RL_Legalizer.circuit_read_lef_macro_define_top_power(self, myMacro)

    def read_init_def_components(self, _is):
        return _RL_Legalizer.circuit_read_init_def_components(self, _is)

    def read_final_def_components(self, _is):
        return _RL_Legalizer.circuit_read_final_def_components(self, _is)

    def read_def_vias(self, _is):
        return _RL_Legalizer.circuit_read_def_vias(self, _is)

    def read_def_pins(self, _is):
        return _RL_Legalizer.circuit_read_def_pins(self, _is)

    def read_def_special_nets(self, _is):
        return _RL_Legalizer.circuit_read_def_special_nets(self, _is)

    def read_def_nets(self, _is):
        return _RL_Legalizer.circuit_read_def_nets(self, _is)

    def read_def_regions(self, _is):
        return _RL_Legalizer.circuit_read_def_regions(self, _is)

    def read_def_groups(self, _is):
        return _RL_Legalizer.circuit_read_def_groups(self, _is)

    def write_def(self, output):
        return _RL_Legalizer.circuit_write_def(self, output)

    def WriteDefComponents(self, inputDef):
        return _RL_Legalizer.circuit_WriteDefComponents(self, inputDef)
    fileOut = property(_RL_Legalizer.circuit_fileOut_get, _RL_Legalizer.circuit_fileOut_set)

    def __init__(self):
        _RL_Legalizer.circuit_swiginit(self, _RL_Legalizer.new_circuit())

    def print_usage(self):
        return _RL_Legalizer.circuit_print_usage(self)

    def read_files(self, argc, argv):
        return _RL_Legalizer.circuit_read_files(self, argc, argv)

    def read_constraints(self, input):
        return _RL_Legalizer.circuit_read_constraints(self, input)

    def read_lef(self, input):
        return _RL_Legalizer.circuit_read_lef(self, input)

    def read_tech_lef(self, input):
        return _RL_Legalizer.circuit_read_tech_lef(self, input)

    def read_cell_lef(self, input):
        return _RL_Legalizer.circuit_read_cell_lef(self, input)

    def read_def(self, input, init_or_final):
        return _RL_Legalizer.circuit_read_def(self, input, init_or_final)

    def read_def_size(self, input):
        return _RL_Legalizer.circuit_read_def_size(self, input)

    def copy_init_to_final(self):
        return _RL_Legalizer.circuit_copy_init_to_final(self)

    def calc_design_area_stats(self):
        return _RL_Legalizer.circuit_calc_design_area_stats(self)

    def ReadDef(self, input):
        return _RL_Legalizer.circuit_ReadDef(self, input)

    def ReadLef(self, lefStor):
        return _RL_Legalizer.circuit_ReadLef(self, lefStor)

    def power_mapping(self):
        return _RL_Legalizer.circuit_power_mapping(self)

    def evaluation(self):
        return _RL_Legalizer.circuit_evaluation(self)

    def Disp(self):
        return _RL_Legalizer.circuit_Disp(self)

    def HPWL(self, mode):
        return _RL_Legalizer.circuit_HPWL(self, mode)

    def calc_density_factor(self, unit):
        return _RL_Legalizer.circuit_calc_density_factor(self, unit)

    def group_analyze(self):
        return _RL_Legalizer.circuit_group_analyze(self)

    def nearest_coord_to_rect_boundary(self, theCell, theRect, mode):
        return _RL_Legalizer.circuit_nearest_coord_to_rect_boundary(self, theCell, theRect, mode)

    def dist_for_rect(self, theCell, theRect, mode):
        return _RL_Legalizer.circuit_dist_for_rect(self, theCell, theRect, mode)

    def check_overlap(self, *args):
        return _RL_Legalizer.circuit_check_overlap(self, *args)

    def check_inside(self, *args):
        return _RL_Legalizer.circuit_check_inside(self, *args)

    def bin_search(self, x_pos, theCell, x, y):
        return _RL_Legalizer.circuit_bin_search(self, x_pos, theCell, x, y)

    def diamond_search(self, theCell, x, y):
        return _RL_Legalizer.circuit_diamond_search(self, theCell, x, y)

    def direct_move(self, *args):
        return _RL_Legalizer.circuit_direct_move(self, *args)

    def shift_move(self, *args):
        return _RL_Legalizer.circuit_shift_move(self, *args)

    def map_move(self, *args):
        return _RL_Legalizer.circuit_map_move(self, *args)

    def overlap_cells(self, theCell):
        return _RL_Legalizer.circuit_overlap_cells(self, theCell)

    def get_cells_from_boundary(self, theRect):
        return _RL_Legalizer.circuit_get_cells_from_boundary(self, theRect)

    def dist_benefit(self, theCell, x_coord, y_coord):
        return _RL_Legalizer.circuit_dist_benefit(self, theCell, x_coord, y_coord)

    def swap_cell(self, cellA, cellB):
        return _RL_Legalizer.circuit_swap_cell(self, cellA, cellB)

    def refine_move(self, *args):
        return _RL_Legalizer.circuit_refine_move(self, *args)

    def get_pixel(self, x_pos, y_pos):
        return _RL_Legalizer.circuit_get_pixel(self, x_pos, y_pos)

    def nearest_cell(self, x_coord, y_coord):
        return _RL_Legalizer.circuit_nearest_cell(self, x_coord, y_coord)

    def simple_placement(self, measure):
        return _RL_Legalizer.circuit_simple_placement(self, measure)

    def non_group_cell_pre_placement(self):
        return _RL_Legalizer.circuit_non_group_cell_pre_placement(self)

    def group_cell_pre_placement(self):
        return _RL_Legalizer.circuit_group_cell_pre_placement(self)

    def non_group_cell_placement(self, mode):
        return _RL_Legalizer.circuit_non_group_cell_placement(self, mode)

    def group_cell_placement(self, *args):
        return _RL_Legalizer.circuit_group_cell_placement(self, *args)

    def brick_placement_1(self, theGroup):
        return _RL_Legalizer.circuit_brick_placement_1(self, theGroup)

    def brick_placement_2(self, theGroup):
        return _RL_Legalizer.circuit_brick_placement_2(self, theGroup)

    def group_refine(self, theGroup):
        return _RL_Legalizer.circuit_group_refine(self, theGroup)

    def group_annealing(self, theGroup):
        return _RL_Legalizer.circuit_group_annealing(self, theGroup)

    def non_group_annealing(self):
        return _RL_Legalizer.circuit_non_group_annealing(self)

    def non_group_refine(self):
        return _RL_Legalizer.circuit_non_group_refine(self)

    def fixed_cell_assign(self):
        return _RL_Legalizer.circuit_fixed_cell_assign(self)

    def print_pixels(self):
        return _RL_Legalizer.circuit_print_pixels(self)

    def group_cell_region_assign(self):
        return _RL_Legalizer.circuit_group_cell_region_assign(self)

    def non_group_cell_region_assign(self):
        return _RL_Legalizer.circuit_non_group_cell_region_assign(self)

    def y_align(self):
        return _RL_Legalizer.circuit_y_align(self)

    def cell_y_align(self, theCell):
        return _RL_Legalizer.circuit_cell_y_align(self, theCell)

    def group_pixel_assign(self):
        return _RL_Legalizer.circuit_group_pixel_assign(self)

    def group_pixel_assign_2(self):
        return _RL_Legalizer.circuit_group_pixel_assign_2(self)

    def erase_pixel(self, theCell):
        return _RL_Legalizer.circuit_erase_pixel(self, theCell)

    def paint_pixel(self, theCell, x_pos, y_pos):
        return _RL_Legalizer.circuit_paint_pixel(self, theCell, x_pos, y_pos)

    def check_legality(self):
        return _RL_Legalizer.circuit_check_legality(self)

    def local_density_check(self, unit, target_Ut):
        return _RL_Legalizer.circuit_local_density_check(self, unit, target_Ut)

    def row_check(self, os):
        return _RL_Legalizer.circuit_row_check(self, os)

    def site_check(self, os):
        return _RL_Legalizer.circuit_site_check(self, os)

    def edge_check(self, os):
        return _RL_Legalizer.circuit_edge_check(self, os)

    def power_line_check(self, os):
        return _RL_Legalizer.circuit_power_line_check(self, os)

    def placed_check(self, log):
        return _RL_Legalizer.circuit_placed_check(self, log)

    def overlap_check(self, os):
        return _RL_Legalizer.circuit_overlap_check(self, os)
    __swig_destroy__ = _RL_Legalizer.delete_circuit

# Register circuit in _RL_Legalizer:
_RL_Legalizer.circuit_swigregister(circuit)

def is_special_char(c):
    return _RL_Legalizer.is_special_char(c)

def read_line_as_tokens(_is, tokens):
    return _RL_Legalizer.read_line_as_tokens(_is, tokens)

def get_next_token(_is, token, beginComment):
    return _RL_Legalizer.get_next_token(_is, token, beginComment)

def get_next_n_tokens(_is, tokens, n, beginComment):
    return _RL_Legalizer.get_next_n_tokens(_is, tokens, n, beginComment)

def IntConvert(fp):
    return _RL_Legalizer.IntConvert(fp)
class truffle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gcell_id = property(_RL_Legalizer.truffle_gcell_id_get, _RL_Legalizer.truffle_gcell_id_set)
    stdcell_num = property(_RL_Legalizer.truffle_stdcell_num_get, _RL_Legalizer.truffle_stdcell_num_set)
    gcell_density = property(_RL_Legalizer.truffle_gcell_density_get, _RL_Legalizer.truffle_gcell_density_set)

    def __init__(self, *args):
        _RL_Legalizer.truffle_swiginit(self, _RL_Legalizer.new_truffle(*args))
    __swig_destroy__ = _RL_Legalizer.delete_truffle

# Register truffle in _RL_Legalizer:
_RL_Legalizer.truffle_swigregister(truffle)
class instance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cell = property(_RL_Legalizer.instance_cell_get, _RL_Legalizer.instance_cell_set)
    moveTry = property(_RL_Legalizer.instance_moveTry_get, _RL_Legalizer.instance_moveTry_set)
    gcell_id = property(_RL_Legalizer.instance_gcell_id_get, _RL_Legalizer.instance_gcell_id_set)

    def __init__(self, *args):
        _RL_Legalizer.instance_swiginit(self, _RL_Legalizer.new_instance(*args))
    __swig_destroy__ = _RL_Legalizer.delete_instance

# Register instance in _RL_Legalizer:
_RL_Legalizer.instance_swigregister(instance)
class RLDP(circuit):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _RL_Legalizer.RLDP_swiginit(self, _RL_Legalizer.new_RLDP())
    __swig_destroy__ = _RL_Legalizer.delete_RLDP

    def read_files(self, argv, Gcell_grid_num):
        return _RL_Legalizer.RLDP_read_files(self, argv, Gcell_grid_num)

    def copy_data(self, copied):
        return _RL_Legalizer.RLDP_copy_data(self, copied)

    def get_Cell(self):
        return _RL_Legalizer.RLDP_get_Cell(self)

    def Gcell_init(self):
        return _RL_Legalizer.RLDP_Gcell_init(self)

    def get_Gcell(self):
        return _RL_Legalizer.RLDP_get_Gcell(self)

    def pre_placement(self):
        return _RL_Legalizer.RLDP_pre_placement(self)

    def place_oneCell(self, runtime_gcell, cell_idx):
        return _RL_Legalizer.RLDP_place_oneCell(self, runtime_gcell, cell_idx)

# Register RLDP in _RL_Legalizer:
_RL_Legalizer.RLDP_swigregister(RLDP)
class CellVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RL_Legalizer.CellVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RL_Legalizer.CellVector___nonzero__(self)

    def __bool__(self):
        return _RL_Legalizer.CellVector___bool__(self)

    def __len__(self):
        return _RL_Legalizer.CellVector___len__(self)

    def __getslice__(self, i, j):
        return _RL_Legalizer.CellVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RL_Legalizer.CellVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RL_Legalizer.CellVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RL_Legalizer.CellVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RL_Legalizer.CellVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RL_Legalizer.CellVector___setitem__(self, *args)

    def pop(self):
        return _RL_Legalizer.CellVector_pop(self)

    def append(self, x):
        return _RL_Legalizer.CellVector_append(self, x)

    def empty(self):
        return _RL_Legalizer.CellVector_empty(self)

    def size(self):
        return _RL_Legalizer.CellVector_size(self)

    def swap(self, v):
        return _RL_Legalizer.CellVector_swap(self, v)

    def begin(self):
        return _RL_Legalizer.CellVector_begin(self)

    def end(self):
        return _RL_Legalizer.CellVector_end(self)

    def rbegin(self):
        return _RL_Legalizer.CellVector_rbegin(self)

    def rend(self):
        return _RL_Legalizer.CellVector_rend(self)

    def clear(self):
        return _RL_Legalizer.CellVector_clear(self)

    def get_allocator(self):
        return _RL_Legalizer.CellVector_get_allocator(self)

    def pop_back(self):
        return _RL_Legalizer.CellVector_pop_back(self)

    def erase(self, *args):
        return _RL_Legalizer.CellVector_erase(self, *args)

    def __init__(self, *args):
        _RL_Legalizer.CellVector_swiginit(self, _RL_Legalizer.new_CellVector(*args))

    def push_back(self, x):
        return _RL_Legalizer.CellVector_push_back(self, x)

    def front(self):
        return _RL_Legalizer.CellVector_front(self)

    def back(self):
        return _RL_Legalizer.CellVector_back(self)

    def assign(self, n, x):
        return _RL_Legalizer.CellVector_assign(self, n, x)

    def resize(self, *args):
        return _RL_Legalizer.CellVector_resize(self, *args)

    def insert(self, *args):
        return _RL_Legalizer.CellVector_insert(self, *args)

    def reserve(self, n):
        return _RL_Legalizer.CellVector_reserve(self, n)

    def capacity(self):
        return _RL_Legalizer.CellVector_capacity(self)
    __swig_destroy__ = _RL_Legalizer.delete_CellVector

# Register CellVector in _RL_Legalizer:
_RL_Legalizer.CellVector_swigregister(CellVector)
class CellVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RL_Legalizer.CellVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RL_Legalizer.CellVectorVector___nonzero__(self)

    def __bool__(self):
        return _RL_Legalizer.CellVectorVector___bool__(self)

    def __len__(self):
        return _RL_Legalizer.CellVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _RL_Legalizer.CellVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RL_Legalizer.CellVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RL_Legalizer.CellVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RL_Legalizer.CellVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RL_Legalizer.CellVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RL_Legalizer.CellVectorVector___setitem__(self, *args)

    def pop(self):
        return _RL_Legalizer.CellVectorVector_pop(self)

    def append(self, x):
        return _RL_Legalizer.CellVectorVector_append(self, x)

    def empty(self):
        return _RL_Legalizer.CellVectorVector_empty(self)

    def size(self):
        return _RL_Legalizer.CellVectorVector_size(self)

    def swap(self, v):
        return _RL_Legalizer.CellVectorVector_swap(self, v)

    def begin(self):
        return _RL_Legalizer.CellVectorVector_begin(self)

    def end(self):
        return _RL_Legalizer.CellVectorVector_end(self)

    def rbegin(self):
        return _RL_Legalizer.CellVectorVector_rbegin(self)

    def rend(self):
        return _RL_Legalizer.CellVectorVector_rend(self)

    def clear(self):
        return _RL_Legalizer.CellVectorVector_clear(self)

    def get_allocator(self):
        return _RL_Legalizer.CellVectorVector_get_allocator(self)

    def pop_back(self):
        return _RL_Legalizer.CellVectorVector_pop_back(self)

    def erase(self, *args):
        return _RL_Legalizer.CellVectorVector_erase(self, *args)

    def __init__(self, *args):
        _RL_Legalizer.CellVectorVector_swiginit(self, _RL_Legalizer.new_CellVectorVector(*args))

    def push_back(self, x):
        return _RL_Legalizer.CellVectorVector_push_back(self, x)

    def front(self):
        return _RL_Legalizer.CellVectorVector_front(self)

    def back(self):
        return _RL_Legalizer.CellVectorVector_back(self)

    def assign(self, n, x):
        return _RL_Legalizer.CellVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _RL_Legalizer.CellVectorVector_resize(self, *args)

    def insert(self, *args):
        return _RL_Legalizer.CellVectorVector_insert(self, *args)

    def reserve(self, n):
        return _RL_Legalizer.CellVectorVector_reserve(self, n)

    def capacity(self):
        return _RL_Legalizer.CellVectorVector_capacity(self)
    __swig_destroy__ = _RL_Legalizer.delete_CellVectorVector

# Register CellVectorVector in _RL_Legalizer:
_RL_Legalizer.CellVectorVector_swigregister(CellVectorVector)
class TruffleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _RL_Legalizer.TruffleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _RL_Legalizer.TruffleVector___nonzero__(self)

    def __bool__(self):
        return _RL_Legalizer.TruffleVector___bool__(self)

    def __len__(self):
        return _RL_Legalizer.TruffleVector___len__(self)

    def __getslice__(self, i, j):
        return _RL_Legalizer.TruffleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _RL_Legalizer.TruffleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _RL_Legalizer.TruffleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _RL_Legalizer.TruffleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _RL_Legalizer.TruffleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _RL_Legalizer.TruffleVector___setitem__(self, *args)

    def pop(self):
        return _RL_Legalizer.TruffleVector_pop(self)

    def append(self, x):
        return _RL_Legalizer.TruffleVector_append(self, x)

    def empty(self):
        return _RL_Legalizer.TruffleVector_empty(self)

    def size(self):
        return _RL_Legalizer.TruffleVector_size(self)

    def swap(self, v):
        return _RL_Legalizer.TruffleVector_swap(self, v)

    def begin(self):
        return _RL_Legalizer.TruffleVector_begin(self)

    def end(self):
        return _RL_Legalizer.TruffleVector_end(self)

    def rbegin(self):
        return _RL_Legalizer.TruffleVector_rbegin(self)

    def rend(self):
        return _RL_Legalizer.TruffleVector_rend(self)

    def clear(self):
        return _RL_Legalizer.TruffleVector_clear(self)

    def get_allocator(self):
        return _RL_Legalizer.TruffleVector_get_allocator(self)

    def pop_back(self):
        return _RL_Legalizer.TruffleVector_pop_back(self)

    def erase(self, *args):
        return _RL_Legalizer.TruffleVector_erase(self, *args)

    def __init__(self, *args):
        _RL_Legalizer.TruffleVector_swiginit(self, _RL_Legalizer.new_TruffleVector(*args))

    def push_back(self, x):
        return _RL_Legalizer.TruffleVector_push_back(self, x)

    def front(self):
        return _RL_Legalizer.TruffleVector_front(self)

    def back(self):
        return _RL_Legalizer.TruffleVector_back(self)

    def assign(self, n, x):
        return _RL_Legalizer.TruffleVector_assign(self, n, x)

    def resize(self, *args):
        return _RL_Legalizer.TruffleVector_resize(self, *args)

    def insert(self, *args):
        return _RL_Legalizer.TruffleVector_insert(self, *args)

    def reserve(self, n):
        return _RL_Legalizer.TruffleVector_reserve(self, n)

    def capacity(self):
        return _RL_Legalizer.TruffleVector_capacity(self)
    __swig_destroy__ = _RL_Legalizer.delete_TruffleVector

# Register TruffleVector in _RL_Legalizer:
_RL_Legalizer.TruffleVector_swigregister(TruffleVector)

